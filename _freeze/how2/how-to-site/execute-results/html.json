{
  "hash": "bf2c06b973b8db7fc086ee28666aea37",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: \"José R. Ferrer Paris\"\ntitle: \"This is how we built this!\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n## No place like home\n\nWho am I? I prepared some [presentation slides](https://jrfep.github.io) about myself. You can find my personal website in [English](https://jrfep.github.io/eng) and [Español](https://jrfep.github.io/esp).\n\nThese instructions are in English, but this site has content in multiple languages... I know it is confusing, but this is how I work. If you require clarifications please open an issue or send me a message. \n\nAll files are available in a [GitHub repository](https://github.com/jrfep/mimundo).  I am using [Quarto](https://quarto.org/docs/websites/) to build this site.\n\n\n## Render site\n\nWith quarto and RStudio we can open the Build tab and select Build Website...\n\nOr we can go to the command line and render the site: \n\n\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nquarto render \n```\n:::\n\n\n\n\nSing [All the rowboats](https://youtu.be/2CZ8ossU4pc) in the meantime (optional).\n\nAnd then launch a preview:\n\n\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nquarto preview\n```\n:::\n\n\n\n\nIf this work, we can just `git add`, `git commit` and `git push` it to the repo and see the changes!\n\n## Just in case\n\n![ [Stand back, I know regular expressions.](https://xkcd.com/208/)](https://imgs.xkcd.com/comics/regular_expressions.png)\n\n\n## I need some photos\n\n### Observations from iNaturalist\n\nTo get the data I first install the `rinat` package:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::i_am(\"how2/how-to-site.qmd\")\nif (!require(rinat)) {\n  install.packages(\"rinat\")\n  library(rinat)\n}\n```\n:::\n\n\n\n\nThen I can download the observations from iNaturalist and save them in a data folder:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download observations and save to RDS file\nuser_obs <- get_inat_obs_user(\"NeoMapas\",maxresults = 5000)\nif (!dir.exists(here::here(\"data\")))\n    dir.create(here::here(\"data\"))\nfile_name <- here::here(\"data\",\"iNaturalist-obs-NeoMapas.rds\")\nsaveRDS(file=file_name, user_obs)\n```\n:::\n\n\n\n\n\n### Photos from Flickr\n\nSo, I think I need some photos in my website, and I have a Flickr account, and I use R, there should be a library that...\n\nOh yes! found it!\n\n<https://koki25ando.github.io/FlickrAPI/>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"FlickrAPI\")\n```\n:::\n\n\n\n\nNow I need a [Flickr API key](https://www.flickr.com/services/developer/) \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(FlickrAPI)\nsetFlickrAPIKey(api_key = \"YOUR_API_KEY_HERE\", install = TRUE)\n```\n:::\n\n\n\n\nAnd finally, it works!\n\nLet's now query our photos (up to 1000) and save the information in a RDS file:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::i_am(\"how2/how-to-site.qmd\")\nlibrary(FlickrAPI)\nlibrary(foreach)\nlibrary(dplyr)\nreadRenviron(\"~/.Renviron\") # read the API key\nhere::i_am(\"how2/how-to-site.qmd\")\nphotos <- foreach(u=c(\"jferrer\",\"jferrer\",\"199798864@N08\"), i=c(1,2,1),.combine = \"bind_rows\") %do% {\n  getPhotos(user_id = u, img_size=\"m\", extras = c(\"description\",\"owner_name\",\n  \"url_m\"), per_page=1000, page=i)\n}\n\ndim(photos)\n\nfile_name <- here::here(\"data\",\"flickr-photos.rds\")\nsaveRDS(file=file_name, photos)\n```\n:::\n\n\n\n\n### Photos from google \n\n\nThis is a trial-and-error test of reading my photos from a google account, based on [some blogs](https://www.listendata.com/2021/10/r-wrapper-for-google-photos-api.html), [medium posts](https://max-coding.medium.com/loading-photos-and-metadata-using-google-photos-api-with-python-7fb5bd8886ef) and [stack overflow posts](https://stackoverflow.com/questions/50573196/access-google-photo-api-with-python-using-google-api-python-client):\n\n1. I created a project in google cloud, \n2. enabled Photos Library API (not sure if this is relevant here),\n3. configured a simple consent page, \n4. created a OAuth 2.0 client ID and downloaded the json file.\n5. added `GC_PROJECT_EMAIL` and `GC_PROJECT_CRED_JSON` to my .Renviron file\n\nThen I ran these lines of code\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gargle)\nlibrary(dplyr)\nlibrary(jsonlite)\nlibrary(httr)\nlibrary(foreach)\nlibrary(stringr)\n\nreadRenviron(\".Renviron\")\ncred_json <- Sys.getenv(\"GC_PROJECT_CRED_JSON\")\nif (!file.exists(cred_json)) {\n  stop(\"credentials not found, please update Renviron file\")\n} else {\n  clnt <- gargle_oauth_client_from_json(path=cred_json)\n}\n\ntkn <- gargle2.0_token(\n  email = Sys.getenv(\"GC_PROJECT_EMAIL\"),\n  client = clnt,\n  scope = c(\"https://www.googleapis.com/auth/photoslibrary.readonly\",\n            \"https://www.googleapis.com/auth/photoslibrary.sharing\")\n)\nk <- token_fetch(token=tkn)\nauthorization = paste('Bearer', k$credentials$access_token)\n\ngetalbum <-\n  GET(\"https://photoslibrary.googleapis.com/v1/albums\",\n      add_headers(\n        'Authorization' = authorization,\n        'Accept'  = 'application/json'),\n      query = list(\"pageSize\" = 50)) %>% \n  content(., as = \"text\", encoding = \"UTF-8\") %>%\n  fromJSON(.) \nif (!is.null(getalbum$nextPageToken)) {\n  getalbum2 <-\n    GET(\"https://photoslibrary.googleapis.com/v1/albums\",\n      add_headers(\n        'Authorization' = authorization,\n        'Accept'  = 'application/json'),\n      query = list(\"pageToken\" = getalbum$nextPageToken)) %>% \n    content(., as = \"text\", encoding = \"UTF-8\") %>%\n    fromJSON(.) \n}\n\nalbum_info <- getalbum$albums %>% select(id, title)\n#aIDs <- getalbum %>% filter(albums.shareInfo.isJoined) %>% pull(albums.id)\nlugares <- c(\"Lugares - México\", \"Lugares - Europa\", \"Lugares - Sur América\", \"Eventos - Venezuela\")\neventos <- c(\"Eventos - CEBA LEE\", \"Eventos - RLE\", \"Eventos - Venezuela\", \"Eventos - Mariposas\", \"Eventos - IVIC\")\naIDs <- album_info %>% filter(title %in% c(lugares, eventos)) %>% pull(id)\n\nphotos <- foreach(aID=aIDs, .combine = \"bind_rows\") %do% {\n  dts <-  POST(\"https://photoslibrary.googleapis.com/v1/mediaItems:search\",\n      add_headers(\n        'Authorization' = authorization,\n        'Accept'  = 'application/json'),\n      body = list(\"albumId\" = aID,\n                  \"pageSize\" = 50),\n      encode = \"json\"\n      ) %>% \n    content(., as = \"text\", encoding = \"UTF-8\") %>%\n    fromJSON(., flatten = TRUE) %>% \n    data.frame()\n  dts$album <- album_info %>% filter(id %in% aID) %>% pull(title)\n  dts <- dts %>% \n    mutate(\n      output_file = str_replace_all(mediaItems.description, \"[ ,/]+\", \"-\"),\n      output_id = abbreviate(mediaItems.id))\n  dts \n}\n\nhere::i_am(\"how2/how-to-site.qmd\")\nimg_folder <- here::here(\"lgrs\",\"img\")\nif (!dir.exists(img_folder))\n  dir.create(img_folder)\n\nfor (i in seq(along=photos$mediaItems.id)[photos$album %in% lugares]) {\n  photo <- photos %>% slice(i)\n  durl <- sprintf(\"%s=w400-h400-d\", photo$mediaItems.baseUrl)\n  dfile <- sprintf(\"%s/%s-%s.jpg\",img_folder, photo$output_id, photo$output_file)\n  if (!file.exists(dfile))\n    download.file(url=durl, destfile=dfile)\n}\n\nimg_folder <- here::here(\"evnts\",\"img\")\nif (!dir.exists(img_folder))\n  dir.create(img_folder)\nfor (i in seq(along=photos$mediaItems.id)[photos$album %in% eventos]) {\n  photo <- photos %>% slice(i)\n  durl <- sprintf(\"%s=w400-h400-d\", photo$mediaItems.baseUrl)\n  dfile <- sprintf(\"%s/%s-%s.jpg\",img_folder, photo$output_id, photo$output_file)\n  if (!file.exists(dfile))\n    download.file(url=durl, destfile=dfile)\n}\n\nfile_name <- here::here(\"data\",\"google-photos.rds\")\nsaveRDS(file=file_name, photos)\n```\n:::\n\n\n\n\nThis downloads the information, but it does not allow to share the links to the photos (they become defunct after the session is closed). It seems that the way forward would be to select existing files, [create shareable albums with the API](https://developers.google.com/photos/library/guides/share-media#rest) and download the shareableURL of the album and photos. Still needs some testing...\n\n### Galleries with `pixture`\n\nI am experimenting with the [pixture package](https://www.royfrancis.com/pixture/index.html) to create image galleries.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"htmlwidgets\",\"shiny\",\"remotes\"))\nremotes::install_github('royfrancis/pixture')\n```\n:::\n\n\n\n\n### Bibliography\n\nDownload one `csl` as a base style\n\n```{.bash}\ncd bibteX\nwget 'https://www.zotero.org/styles/journal-and-proceedings-of-the-royal-society-of-new-south-wales?source=1' --output-document=my.csl\n```\n\nModify sort order of the bibliography (not the citation...):\n\n```{.xml}\n<bibliography hanging-indent=\"true\" entry-spacing=\"0\">\n    <sort>\n      <key variable=\"issued\" sort=\"descending\"/>\n      <key macro=\"author\"/>\n    </sort>\n  ...\n```\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}